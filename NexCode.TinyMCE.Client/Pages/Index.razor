@page "/"



<RichTextEditor DynamicPlugins="@(new[] { Plugin })" @ref="RichTextEditor" Options="Options">
    <strong>Test</strong>
</RichTextEditor>


@code
{


    private RichTextEditor RichTextEditor { get; set; }

    [Inject]
    private IJSRuntime JsRuntime { get; set; }

    public Index()
    {
        Plugin = new BlazorPlugin()
        {
            Name = "test",
            /*Buttons = new List<BlazorPlugin.BaseAction>()
            {
                new BlazorPlugin.BaseAction()
                {
                    OnAction = TestCall,
                    Text = "Call test"
                }
            },*/
            ToolbarButtons = new List<BlazorPlugin.ToolbarButton>()
            {
                new BlazorPlugin.ToolbarButton()
                {
                    Text = "Test MenuDrop",
                    Items = new List<BlazorPlugin.ToolbarButton.Item>()
                    {
                        new BlazorPlugin.ToolbarButton.Item(){Text = "Item 1"},
                        new BlazorPlugin.ToolbarButton.Item(){Text = "Item 2", SubItems = new []
                        {
                            new BlazorPlugin.ToolbarButton.Item(){Text = "Subitem 1"},
                            new BlazorPlugin.ToolbarButton.Item(){Text = "Subitem 2"},
                        }}
                    }
                }
            }
        };
    }


    private BlazorPlugin Plugin;

    private RichTextEditorOptions Options = new RichTextEditorOptions()
    {
        Plugins = "test",
        Toolbar = "test"
    };


    private async void TestCall()
    {
        var module = await JsRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./js/NewPlugin.js").AsTask();


        await module.InvokeVoidAsync("showDialog", RichTextEditor.Id);

    }
    

}
